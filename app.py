# üì¶ #### Imports
import os
import re
import json
import datetime
import requests

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from google.cloud import bigquery
from google.auth import default
import openai
from dotenv import load_dotenv
from agents import Agent, function_tool

# Carregar vari√°veis de ambiente
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')
if not openai_api_key:
    raise ValueError('A vari√°vel de ambiente OPENAI_API_KEY n√£o est√° definida.')
openai_client = openai.OpenAI(api_key=openai_api_key)

# Fun√ß√£o para resumir decis√µes
@function_tool
def resumir_decisao(decisao: str) -> str:
    prompt = f"""
Resuma de forma clara, objetiva e t√©cnica a decis√£o judicial e as informa√ß√µes de san√ß√µes abaixo, destacando o que foi decidido, as penas aplicadas, absolvi√ß√µes, homologa√ß√µes, san√ß√µes, fontes, datas ou outros pontos relevantes para an√°lise de risco:

{decisao}
"""
    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "Voc√™ √© um analista jur√≠dico especializado em resumir decis√µes judiciais e san√ß√µes."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=500,
        temperature=0.3
    )
    return response.choices[0].message.content

# Fun√ß√£o para an√°lise de risco
@function_tool
def analisar_risco(dados: dict, resumos: list) -> str:
    prompt = f"""
Voc√™ √© um analista jur√≠dico de uma fintech, especializado em compliance e avalia√ß√£o de risco de clientes. Seja c√©tico e criterioso. Analise os dados abaixo e, para cada processo criminal, avalie o tipo, contexto, partes envolvidas, decis√µes (traga um resumo detalhado do conte√∫do da decis√£o), homologa√ß√µes e demais detalhes relevantes. Considere o hist√≥rico, quantidade, gravidade e natureza dos processos para emitir um parecer objetivo sobre o risco de manter esse cliente na base (baixo, m√©dio ou alto risco), justificando sua conclus√£o de forma clara e t√©cnica.

Dados cadastrais e de compliance:
{json.dumps(dados, ensure_ascii=False, indent=2)}

Resumos das decis√µes:
{json.dumps(resumos, ensure_ascii=False, indent=2)}
"""
    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "Voc√™ √© um assistente que resume dados de pessoas."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=1000,
        temperature=0.3
    )
    return response.choices[0].message.content

# Cria√ß√£o dos agentes
agente_resumo = Agent(
    name="Resumidor de Decis√µes",
    instructions="Resuma decis√µes judiciais de forma clara, t√©cnica e objetiva, destacando pontos relevantes para an√°lise de risco.",
    model="gpt-4o-mini",
    tools=[resumir_decisao],
)

agente_risco = Agent(
    name="Analista de Risco",
    instructions="Analise o hist√≥rico, contexto e gravidade dos processos e emita um parecer de risco (baixo, m√©dio, alto), justificando tecnicamente.",
    model="gpt-4o-mini",
    tools=[analisar_risco],
)

# ‚öôÔ∏è #### Setup BigQuery (ambiente local)
# Se necess√°rio, configure as credenciais do Google Cloud via vari√°vel de ambiente ou arquivo json
# Exemplo: export GOOGLE_APPLICATION_CREDENTIALS='caminho/para/credenciais.json'

bq_client = bigquery.Client(project='ai-services-sae')

# üîê #### Credenciais 
bigdata_token_id = os.getenv('BIGDATA_TOKEN_ID')
bigdata_token_hash = os.getenv('BIGDATA_TOKEN_HASH')
if not bigdata_token_id or not bigdata_token_hash:
    raise ValueError('As vari√°veis de ambiente BIGDATA_TOKEN_ID e/ou BIGDATA_TOKEN_HASH n√£o est√£o definidas.')

# üß† #### Fun√ß√£o para buscar dados na API

def fetch_bdc_data(
    document_number: str,
    url: str,
    dataset: str,
    token_hash: str,
    token_id: str
):
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "AccessToken": token_hash,
        "TokenId": token_id
    }
    payload = {
        "q": f"doc{{{document_number}}}",
        "Datasets": dataset
    }
    response = requests.post(url, json=payload, headers=headers)
    response.raise_for_status()
    return response.json()

def formatar_sancoes_detalhadas(sancoes):
    if not sancoes or sancoes == "Nenhuma san√ß√£o detalhada encontrada":
        return "Nenhuma san√ß√£o detalhada encontrada."
    texto = []
    for idx, s in enumerate(sancoes, 1):
        texto.append(f"\n---\nSan√ß√£o #{idx}:")
        texto.append(f"Fonte: {s.get('Fonte', '')}")
        texto.append(f"Tipo: {s.get('Tipo', '')} ({s.get('Tipo Padronizado', '')})")
        texto.append(f"Status: {s.get('Status', '')}")
        texto.append(f"√ìrg√£o: {s.get('√ìrg√£o', '')}")
        texto.append(f"Data de In√≠cio: {s.get('Data de In√≠cio', '')}")
        texto.append(f"Data de Fim: {s.get('Data de Fim', '')}")
        texto.append(f"N√∫mero do Processo: {s.get('N√∫mero do Processo', '')}")
        texto.append(f"N√∫mero do Mandado: {s.get('N√∫mero do Mandado', '')}")
        texto.append(f"Regime: {s.get('Regime', '')}")
        texto.append(f"Tempo de Pena: {s.get('Tempo de Pena', '')}")
        texto.append(f"Recaptura: {s.get('Recaptura', '')}")
        texto.append(f"Nome na Lista: {s.get('Nome na Lista', '')}")
        texto.append(f"Data de Nascimento: {s.get('Data de Nascimento', '')}")
        texto.append(f"Descri√ß√£o da Decis√£o: {s.get('Descri√ß√£o', '')}")
    return '\n'.join(texto)

def formatar_sancoes_detalhadas_html(sancoes):
    if not sancoes or sancoes == "Nenhuma san√ß√£o detalhada encontrada":
        return "<div class='no-sanction'>Nenhuma san√ß√£o detalhada encontrada.</div>"
    html = []
    for idx, s in enumerate(sancoes, 1):
        html.append(f"""
        <div class='sanction-block'>
            <div class='sanction-title'>San√ß√£o #{idx}</div>
            <div><b>Fonte:</b> {s.get('Fonte', '')}</div>
            <div><b>Tipo:</b> {s.get('Tipo', '')} ({s.get('Tipo Padronizado', '')})</div>
            <div><b>Status:</b> {s.get('Status', '')}</div>
            <div><b>√ìrg√£o:</b> {s.get('√ìrg√£o', '')}</div>
            <div><b>Data de In√≠cio:</b> {s.get('Data de In√≠cio', '')}</div>
            <div><b>Data de Fim:</b> {s.get('Data de Fim', '')}</div>
            <div><b>N√∫mero do Processo:</b> {s.get('N√∫mero do Processo', '')}</div>
            <div><b>N√∫mero do Mandado:</b> {s.get('N√∫mero do Mandado', '')}</div>
            <div><b>Regime:</b> {s.get('Regime', '')}</div>
            <div><b>Tempo de Pena:</b> {s.get('Tempo de Pena', '')}</div>
            <div><b>Recaptura:</b> {s.get('Recaptura', '')}</div>
            <div><b>Nome na Lista:</b> {s.get('Nome na Lista', '')}</div>
            <div><b>Data de Nascimento:</b> {s.get('Data de Nascimento', '')}</div>
            <div><b>Descri√ß√£o da Decis√£o:</b> <pre style='white-space:pre-wrap'>{s.get('Descri√ß√£o', '')}</pre></div>
        </div>
        """)
    return '\n'.join(html)

def pipeline_analise_cpf(cpf_input: str):
    """
    Executa toda a pipeline de an√°lise de risco a partir de um CPF, retornando os dados principais, resumos e parecer.
    """
    cpf_sanitizado = re.sub(r'\D', '', cpf_input)
    bdc_data = fetch_bdc_data(
        document_number=cpf_sanitizado,
        url="https://plataforma.bigdatacorp.com.br/pessoas",
        dataset="""basic_data,
                   processes.filter(partypolarity = PASSIVE, courttype = CRIMINAL),
                   kyc.filter(standardized_type, standardized_sanction_type, type, sanctions_source = Conselho Nacional de Justi√ßa)""",
        token_hash=bigdata_token_hash,
        token_id=bigdata_token_id
    )
    print("\n===== RESULTADO BRUTO DA API (bdc_data) =====\n")
    print(json.dumps(bdc_data, ensure_ascii=False, indent=2))
    print("\n===== FIM DO RESULTADO BRUTO =====\n")
    try:
        pessoa = bdc_data["Result"][0]
        basic = pessoa.get("BasicData", {})
        kyc = pessoa.get("KycData", {})
        processos = pessoa.get("Processes", {})
        detalhes_processos = []
        if processos.get("Lawsuits"):
            for proc in processos["Lawsuits"]:
                if proc.get("CourtType") == "CRIMINAL":
                    conteudo = proc.get("Content", "")
                    decisao = proc.get("Decision", "")
                    descricao = proc.get("Description") or proc.get("Summary") or proc.get("Details") or ""
                    homologacao = False
                    for texto in [conteudo, decisao, descricao]:
                        if texto and "homologada" in texto.lower():
                            homologacao = True
                            break
                    partes = proc.get("Parties", [])
                    is_reu = False
                    partes_resumo = []
                    for parte in partes:
                        papel = parte.get("Type", "")
                        nome = parte.get("Name", "")
                        espec = parte.get("PartyDetails", {}).get("SpecificType", "")
                        partes_resumo.append(f"{nome} ({papel}{' - ' + espec if espec else ''})")
                        if papel.upper() == "DEFENDANT" or papel.upper() == "R√âU" or espec.upper() == "R√âU":
                            if basic.get("Name", "").strip().upper() in nome.strip().upper():
                                is_reu = True
                    detalhes_processos.append({
                        "N√∫mero": proc.get("CaseNumber") or proc.get("Number"),
                        "√â R√©u": "Sim" if is_reu else "N√£o",
                        "Tipo": proc.get("Type"),
                        "Assunto Principal": proc.get("MainSubject"),
                        "Assunto CNJ": proc.get("InferredCNJSubjectName"),
                        "Tipo Procedimento CNJ": proc.get("InferredCNJProcedureTypeName"),
                        "Outros Assuntos": proc.get("OtherSubjects"),
                        "Data": proc.get("FilingDate"),
                        "√ìrg√£o": proc.get("CourtName"),
                        "√ìrg√£o Julgador": proc.get("JudgingBody"),
                        "N√≠vel da Corte": proc.get("CourtLevel"),
                        "Comarca": proc.get("CourtDistrict"),
                        "Estado": proc.get("State"),
                        "Juiz": proc.get("Judge"),
                        "Situa√ß√£o": proc.get("Status"),
                        "Data de Encerramento": proc.get("CloseDate"),
                        "√öltima Movimenta√ß√£o": proc.get("LastMovementDate"),
                        "Partes": partes_resumo,
                        "Decis√£o": decisao,
                        "Descri√ß√£o": descricao,
                        "Conte√∫do": conteudo,
                        "Homologa√ß√£o": "Sim" if homologacao else "N√£o"
                    })
        # Extrair todas as san√ß√µes detalhadas
        sancoes_detalhadas = []
        for sancao in kyc.get("SanctionsHistory", []):
            detalhes = sancao.get("Details", {})
            sancoes_detalhadas.append({
                "Fonte": sancao.get("Source"),
                "Tipo": sancao.get("Type"),
                "Tipo Padronizado": sancao.get("StandardizedSanctionType"),
                "Data de In√≠cio": sancao.get("StartDate"),
                "Data de Fim": sancao.get("EndDate"),
                "Status": detalhes.get("Status"),
                "√ìrg√£o": detalhes.get("Agency"),
                "N√∫mero do Processo": detalhes.get("ProcessNumber"),
                "N√∫mero do Mandado": detalhes.get("ArrestWarrantNumber"),
                "Descri√ß√£o": detalhes.get("Decision"),
                "Regime": detalhes.get("PrisonRegime"),
                "Tempo de Pena": detalhes.get("PenaltyTime"),
                "Recaptura": detalhes.get("Recapture"),
                "Data de Nascimento": detalhes.get("BirthDate"),
                "Nome na Lista": detalhes.get("NameInSanctionList"),
                "Outros Detalhes": detalhes
            })
        dados_principais = {
            "Nome": basic.get("Name"),
            "CPF": basic.get("TaxIdNumber"),
            "Idade": basic.get("Age"),
            "Situa√ß√£o Cadastral": basic.get("TaxIdStatus"),
            "√ìrg√£o de Origem": basic.get("TaxIdOrigin"),
            "Processos": processos.get("TotalLawsuits"),
            "San√ß√µes": kyc.get("IsCurrentlySanctioned"),
            "PEP": kyc.get("IsCurrentlyPEP"),
            "√öltima San√ß√£o": kyc.get("LastSanctionDate"),
            "San√ß√µes Detalhadas": formatar_sancoes_detalhadas(sancoes_detalhadas),
            "Processos Criminais Detalhes": detalhes_processos if detalhes_processos else "Nenhum processo criminal encontrado"
        }
    except Exception as e:
        dados_principais = {"erro": f"N√£o foi poss√≠vel extrair dados principais: {e}"}
        processos = {}
        kyc = {}
    lista_decision_content = []
    if processos.get("Lawsuits"):
        lista_decision_content = extrair_decisoes([
            proc for proc in processos["Lawsuits"] if proc.get("CourtType") == "CRIMINAL"
        ])
    resumos = []
    if lista_decision_content:
        sanctions_info = ""
        if kyc:
            sanctions_info = f"""
San√ß√µes:
- Atualmente sancionado: {kyc.get('IsCurrentlySanctioned')}
- √öltima san√ß√£o: {kyc.get('LastSanctionDate')}
- PEP: {kyc.get('IsCurrentlyPEP')}
"""
        for item in lista_decision_content:
            texto_decisao = f"""
Processo: {item['N√∫mero']}
Tipo: {item['TipoDecisao']}
Data: {item.get('DecisionDate', '')}
Decis√£o: {item['DecisionContent']}
{sanctions_info}
"""
            resumo = agente_resumo.run(decisao=texto_decisao)
            resumos.append({
                "Processo": item['N√∫mero'],
                "Resumo": resumo
            })
    parecer = agente_risco.run(dados=dados_principais, resumos=resumos)
    return dados_principais, resumos, parecer

def classificar_tipo_decisao(texto):
    texto_lower = texto.lower()
    if "homolog" in texto_lower:
        return "Homologa√ß√£o"
    if "conden" in texto_lower:
        return "Condena√ß√£o"
    if "absolv" in texto_lower:
        return "Absolvi√ß√£o"
    if "suspens√£o condicional" in texto_lower:
        return "Suspens√£o Condicional"
    return "Outro"

def extrair_decisoes(lista_lawsuits):
    """
    Extrai decis√µes relevantes de uma lista de processos, incluindo contexto e tipo de decis√£o.
    """
    decisoes = []
    for proc in lista_lawsuits:
        processo_info = {
            "N√∫mero": proc.get("CaseNumber") or proc.get("Number"),
            "√ìrg√£o": proc.get("CourtName"),
            "Comarca": proc.get("CourtDistrict"),
            "Juiz": proc.get("Judge"),
        }
        for item in proc.get("Decisions", []):
            conteudo = item.get("DecisionContent", "").strip()
            if conteudo:
                decisao = {
                    "DecisionContent": conteudo,
                    "DecisionDate": item.get("DecisionDate"),
                    "TipoDecisao": classificar_tipo_decisao(conteudo)
                }
                decisao.update(processo_info)
                decisoes.append(decisao)
    # Remover duplicatas
    visto = set()
    decisoes_unicas = []
    for d in decisoes:
        chave = (d["DecisionContent"], d.get("DecisionDate"))
        if chave not in visto:
            visto.add(chave)
            decisoes_unicas.append(d)
    # Ordenar por data (mais recente primeiro)
    decisoes_ordenadas = sorted(decisoes_unicas, key=lambda x: x.get("DecisionDate") or "", reverse=True)
    return decisoes_ordenadas

# Remover execu√ß√£o autom√°tica ao importar
if __name__ == "__main__":
    cpf_input = '01130380114'
    dados_principais, resumos, parecer = pipeline_analise_cpf(cpf_input)
    print("\nResumo das decis√µes (por agente):\n")
    for r in resumos:
        print(f"Processo: {r['Processo']}\nResumo: {r['Resumo']}\n")
    print("\nParecer final de risco (por agente):\n")
    print(parecer)
    # Gera√ß√£o do HTML com CSS para san√ß√µes detalhadas
    sancoes_html = ""
    if isinstance(dados_principais.get('San√ß√µes Detalhadas'), str):
        sancoes_html = f"<div class='no-sanction'>{dados_principais.get('San√ß√µes Detalhadas')}</div>"
    else:
        sancoes_html = formatar_sancoes_detalhadas_html([s for s in dados_principais.get('San√ß√µes Detalhadas', []) if isinstance(s, dict)])
    html_content = f"""
<html>
<head>
<meta charset='utf-8'>
<title>Parecer de Risco</title>
<style>
    body {{
        font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;
        background: linear-gradient(120deg, #f0f4f8 0%, #e9eefa 100%);
        color: #23272f;
        margin: 0;
        padding: 0 0 40px 0;
    }}
    h2 {{
        color: #2d6cdf;
        margin-top: 32px;
        margin-bottom: 18px;
        letter-spacing: 0.5px;
    }}
    .container {{
        max-width: 900px;
        margin: 32px auto 0 auto;
        background: #fff;
        border-radius: 18px;
        box-shadow: 0 6px 32px rgba(44, 62, 80, 0.10);
        padding: 36px 32px 32px 32px;
    }}
    .sanction-block {{
        background: linear-gradient(100deg, #f7faff 60%, #eaf1fb 100%);
        border: 1.5px solid #e3e8f0;
        border-radius: 12px;
        margin: 28px 0;
        padding: 22px 28px 18px 28px;
        box-shadow: 0 2px 12px rgba(44, 62, 80, 0.07);
        transition: box-shadow 0.2s, border 0.2s;
        position: relative;
    }}
    .sanction-block:hover {{
        box-shadow: 0 6px 24px rgba(44, 62, 80, 0.13);
        border: 1.5px solid #b3cdf6;
    }}
    .sanction-title {{
        font-size: 1.18em;
        font-weight: 600;
        color: #2563eb;
        margin-bottom: 14px;
        letter-spacing: 0.2px;
    }}
    .no-sanction {{
        color: #888;
        font-style: italic;
        margin: 18px 0;
    }}
    pre {{
        background: #f3f6fa;
        border-radius: 6px;
        padding: 10px 12px;
        font-size: 1em;
        margin: 0;
        color: #2d3748;
        font-family: 'Fira Mono', 'Consolas', 'Menlo', monospace;
        white-space: pre-wrap;
    }}
    .sanction-block div {{
        margin-bottom: 7px;
        line-height: 1.6;
    }}
    @media (max-width: 700px) {{
        .container {{
            padding: 12px 4vw 18px 4vw;
        }}
        .sanction-block {{
            padding: 14px 6vw 12px 6vw;
        }}
    }}
</style>
</head>
<body>
<div class='container'>
<h2>Parecer final de risco (por agente)</h2>
<pre style='font-family:inherit'>{parecer}</pre>
<h2>San√ß√µes Detalhadas</h2>
{sancoes_html}
</div>
</body>
</html>
"""
    with open("parecer.html", "w", encoding="utf-8") as f:
        f.write(html_content)